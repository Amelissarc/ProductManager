function getRandomNumber() {
    // recuperamos un n√∫mero aleatorio entre 0 y 1
    const random = Math.random() // por ejemplo: 0.6803487380457318
  
    // lo multiplicamos por 10 para que est√© entre 0 y 10
    const multiplied = random * 10 // -> 6.803487380457318
  
    // redondeamos hacia abajo para que est√© entre 0 y 9
    const rounded = Math.floor(multiplied) // -> 6
  
    // le sumamos uno para que est√© entre 1 y 10
    const result = rounded + 1 // -> 7
  
    // devolvemos el resultado
    return result
  }

  // Parametros
  function saludar(nombre) {
    console.log("Hola " + nombre)
  }

  saludar('Melissa')


  // Parametros y argumentos

  // la funci√≥n suma tiene dos par√°metros: a y b
function sumar(a, b) {
    return a + b
  }
  
  // cuando llamamos a la funci√≥n, le pasamos dos argumentos: 2 y 3
  const resultadoSuma = sumar(2, 3)  // -> 5


  // El orden de los parametros importa: 
  function cocinarMicroondas(plato, tiempo, potencia) {
    if (plato === 'üê•' && tiempo === 1 && potencia === 5) {
      return 'üçó'
    }
  
    if (plato === 'ü•ö' && tiempo === 2 && potencia === 3) {
      return 'üç≥'
    }
  
    return '‚ùå Plato no soportado'
  }

  const resultado = cocinarMicroondas('üê•', 1, 5)
console.log(resultado) // -> üçó

/* const resultado = cocinarMicroondas(1, 5, 'üê•')
console.log(resultado) // -> '‚ùå Plato no soportado' */

// Una function expression es una funci√≥n que se asigna a una variable. Por ejemplo:

// esto es una function expression
const sum = function (a, b) {
    return a + b
  }
  
  // esto es una declaraci√≥n de funci√≥n
  function sum(a, b) {
    return a + b
  }

  sum(1, 2) // 3

/* 
  Hoisting
El hoisting es un t√©rmino que se usa para describir c√≥mo JavaScript parece que mueve las declaraciones funciones al principio del c√≥digo, de forma que las puedes usar incluso antes de declararlas. Por ejemplo: */

sum(1, 2) // 3

function sum(a, b) {
  return a + b
}

// no se puede con las funtion expression
sum(1, 2) // ‚ùå ReferenceError: sum is not defined

const sum = function (a, b) {
  return a + b
}

/* Las funciones flecha son una forma m√°s concisa de crear funciones en JavaScript, y se han vuelto muy populares en los √∫ltimos a√±os debido a su sintaxis simplificada.

La sintaxis b√°sica de una funci√≥n flecha es la siguiente: */

const miFuncionFlecha = () => {
  // c√≥digo a ejecutar
}

//Las funciones flecha son siempre funciones an√≥nimas y function expressions. Esto significa que no tienen nombre y que se asignan a una variable.

/* Las funciones flecha tienen varias ventajas sobre las funciones regulares en JavaScript. Algunas son:

Sintaxis m√°s concisa: la sintaxis de las funciones flecha es m√°s corta y m√°s f√°cil de leer que la sintaxis de las funciones regulares, especialmente cuando se trabaja con funciones de una sola l√≠nea.

Return impl√≠cito: las funciones flecha puede devolver el valor de la expresi√≥n sin usar la palabra clave return cuando son de una sola l√≠nea. Esto hace que las funciones flecha sean a√∫n m√°s cortas y m√°s f√°ciles de leer.

Funciones an√≥nimas m√°s legibles: las funciones flecha son una forma m√°s legible y concisa de crear funciones an√≥nimas en JavaScript, lo cual puede hacer que nuestro c√≥digo sea m√°s f√°cil de entender. */

// Declaraci√≥n de funci√≥n regular
function sumar(a, b) {
    return a + b
  }
  
  // Funci√≥n flecha
  const sumarFlecha = (a, b) => {
    return a + b
  }
  
  // Funci√≥n flecha con return impl√≠cito
  const sumarFlechaImpl√≠cito = (a, b) => a + b

  /* La recursividad es una t√©cnica de programaci√≥n que consiste en que una funci√≥n se llame a s√≠ misma. 
  Qu√© es la condici√≥n base en la recursividad? Una condici√≥n que permite evitar que una funci√≥n se llame infinitamente
  Si no se define una condici√≥n base en una funci√≥n recursiva, la funci√≥n se llamar√° infinitamente y eventualmente el programa se bloquear√°.
  */

  function cuentaAtras(numero) {
    // Condici√≥n base: Si el n√∫mero que recibe es
    // menor de 0 entonces salimos de la funci√≥n
    if (numero < 0) { return }
  
    // Si el n√∫mero era mayor o igual a 0, lo mostramos
    console.log(numero)
  
    // Y llamamos a la funci√≥n con el n√∫mero anterior
    cuentaAtras(numero - 1)
  }

  //Si llamamos a la funci√≥n con el n√∫mero 3, el resultado ser√°:

cuentaAtras(3)
// -> 3
// -> 2
// -> 1
// -> 0

/* Usando recursividad y devolviendo un valor
La recursividad se usa muchas veces para solucionar algoritmos. Por ejemplo, vamos a crear una funci√≥n que calcule el factorial de un n√∫mero.

El factorial de un n√∫mero es el resultado de multiplicar ese n√∫mero por todos los anteriores hasta llegar a 1. Por ejemplo, el factorial de 5 es 5 * 4 * 3 * 2 * 1 = 120 */

function factorial(n) {
  // Condici√≥n base: Si el n√∫mero es 0 o 1, devolvemos 1
  // y no llamamos a la funci√≥n de nuevo
  if (n === 0 || n === 1) {
    return 1
  } else {
    // Si el n√∫mero es mayor que 1, llamamos a la funci√≥n
    return n * factorial(n - 1)
  }
}

console.log(factorial(5)) // Resultado: 120
console.log(factorial(3)) // Resultado: 6

